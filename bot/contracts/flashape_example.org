* flashApe(address callTo, uint256 flags, bytes params)
https://etherscan.io/tx/0x0eb48de1574ade163341c1ef77057d149d42e5aa1c92713425a2e14862fbf89e
** MethodID: 0x62a71f41
** Calldata
**** [0]: 0000000000000000000000000000fee6275dab194ab538a01dd8b18b02b20000 address callTo
**** [1]: 0006000000000000000000000000000000000000000000000000000000000881 uint flags
     call largeApe, burn native gas token, borrow eth
**** [2:32] bytes params -> largeApeCallback(... bytes calldata data) -> eldddhzr(abi.decode(data,(uint256[])))
***** [2]: 0000000000000000000000000000000000000000000000000000000000000060
      96 byte length of data preceding 'params' contents (calldata[2 <= i <= 4])?
***** [3]:  00000000000000000000000000000000000000000000000000000000000003a0
      928 byte length of 'params' (calldata[4 <= i <= 32])
***** [4]: 0000000000000000000000000000000000000000000000000000000000000020
      32 byte length of data preceding uint[] 'data' contents (calldata[4])?
***** [5]: 000000000000000000000000000000000000000000000000000000000000001b 
      27 word length of uint[] 'data' argument to eldddhzr (calldata[6 <= i <= 32])
***** [6]: 0000000000000000052ce81b91f35d8000000000000000000000000000000006 data[0] actionFlags
      weth to eth after ape, pay 0.37292807427531505 eth to coinbase (right shift 128 bits)
***** [7]: 0000000000d0e30db001f95ec02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 data[1] 1st callInfo (big-endian bit-indexed below)
      callId = 0 is calldata[5] i.e. the word length of 'data'
      callId = 1 is data[0]
      callId = 2 is data[1], where the loop starts
****** [256:252] = delegate call if 0x1 else call
       = (callInfo & 0xf000000000000000000000000000000000000000000000000000000000000000)
****** [240:232] = index in data to store result (result_data_index)
       = (callInfo // 0x10000000000000000000000000000000000000000000000000000000000) & 0xff
****** [232:216] = callLength = 0
       = (callInfo // 0x1000000000000000000000000000000000000000000000000000000) & 0xffff
       size of the calldata after the function signature in 32-bit chunks
****** [216:184] = callSignDataShiftResult (sig) = 0xd0e30db000000000000000000000000000000000000000000000000000000000 (216 bits)
       = (callInfo & 0xffffffff0000000000000000000000000000000000000000000000) * 0x10000000000
******* *store weth deposit sig at free memory pointer*
	let p = memory[0x40] i.e. the start of free memory
	if sig == 0 and callLength > 0, store memory[sig:sig+callLength*32] @ memory[p:p+callLength*32]
	else store the signature @ memory[p:p+4] and if callLength + 4 > 4, store the calldata after it
******* *call deposit and increase callId by callLength + 2*
	call with calldata @ memory[p:p+n] (n >= 4), storing result @ memory[p:p+32]
	if result_data_index > 0, store the result at data[result_data_index]
	finally, increase callId by callLength + 2
****** [184:160] = gas cost = 129374
       = (callInfo // 0x10000000000000000000000000000000000000000) & 0xffffff = 129374
****** [160:0] = callContract = 0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 weth token
       callInfo & 0xffffffffffffffffffffffffffffffffffffffff
***** [8]: 00000000000000000000000000000000000000000000000168d2000000000000 data[2]
      amount of eth to deposit in weth contract = 25.999843598763295
***** [9]: 0000000002a9059cbb01f43ec02aaa39b223fe8d0a0e5c4f27ead9083c756cc2 data[3]
    [10]: 0000000000000000000000000000000000000000000000000000000000000000
    [11]: 000000000000000000000000819f3450da6f110ba6ea52195b3beafa246062de
    [12]: 00000000000000000000000000000000000000000000000168d2000000000000
    [13]: 0000000004022c0d9f02b330819f3450da6f110ba6ea52195b3beafa246062de
    [14]: 0000000000000000000000000000000000000000000000000000000000000000
    [15]: 0000000000000000000000000000000000000000000009ca9bfd4f505c3b04cb
    [16]: 0000000000000000000000000000000000000000000000000000000000000000
    [17]: 0000000000000000000000000000fee6275dab194ab538a01dd8b18b02b20000
    [18]: 0000000000000000000000000000000000000000000000000000000000000020
    [19]: 000000000cb77d239b04383a2f9ec37d6ccfff1cab21733bdadede11c823ccb0
    [20]: 0000000000000000000000000000000000000000000000000000000000000000
    [21]: 00000000000000000000000000000000000000000000000000000000000000c0
    [22]: 0000000000000000000000000000000000000000000009ca9bfd4f505c3b04cb
    [23]: 0000000000000000000000000000000000000000000000000000000000000001
    [24]: 0000000000000000000000000000fee6275dab194ab538a01dd8b18b02b20000
    [25]: 0000000000000000000000000000000000000000000000000000000000000000
    [26]: 0000000000000000000000000000000000000000000000000000000000000000
    [27]: 0000000000000000000000000000000000000000000000000000000000000005
    [28]: 0000000000000000000000007d1afa7b718fb893db30a3abc0cfc608aacfebb0
    [29]: 0000000000000000000000008151e0fbbc10af5b0f16b413db0747169e9687d9
    [30]: 0000000000000000000000001f573d6fb3f13d689ff844b4ce37794d79a7ff1c
    [31]: 000000000000000000000000b1cd6e4153b2a390cf00a6556b0fc1458c4a5533
    [32]: 000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee
